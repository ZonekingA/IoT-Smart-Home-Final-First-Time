import time
from pymodbus.client import ModbusSerialClient

# üîß ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÅ‡∏•‡∏∞‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á Modbus RTU
PORT = "COM4"  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
BAUDRATE = 9600
TIMEOUT = 3  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤ Timeout
PARITY = 'N'  # ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏≠‡∏á 'E' ‡∏´‡∏£‡∏∑‡∏≠ 'O' ‡∏ñ‡πâ‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
STOPBITS = 1
BYTESIZE = 8

SCAN_SLAVE_ID_RANGE = range(1, 10)  # ‡∏™‡πÅ‡∏Å‡∏ô ID ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà 1-9
SCAN_REGISTERS_RANGE = range(0, 20)  # ‡∏™‡πÅ‡∏Å‡∏ô Register ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà 0-19

# üîó ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Modbus Client
client = ModbusSerialClient(
    port=PORT, baudrate=BAUDRATE, timeout=TIMEOUT, 
    stopbits=STOPBITS, bytesize=BYTESIZE, parity=PARITY
)

# üöÄ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
if not client.connect():
    print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Modbus RTU")
    exit()

print(f"‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå Modbus ‡∏ö‡∏ô {PORT}...\n")

# üîé ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Slave ID ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
found_slaves = []
for slave_id in SCAN_SLAVE_ID_RANGE:
    print(f"üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Slave ID: {slave_id} ...", end=" ")

    try:
        result = client.read_holding_registers(address=0, count=1, slave=slave_id)  # ‡πÉ‡∏ä‡πâ kwargs
        if result and not result.isError():
            print(f"‚úÖ ‡∏û‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå! üéØ (Slave ID: {slave_id})")
            found_slaves.append(slave_id)
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö")
    except Exception as e:
        print(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

if not found_slaves:
    print("\nüö´ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå Modbus ‡πÉ‡∏î‡πÜ ‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î")
    client.close()
    exit()

# üîé ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Register Address ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
for slave_id in found_slaves:
    print(f"\nüîé ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πÅ‡∏Å‡∏ô Register ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Slave ID: {slave_id}...\n")

    for reg in SCAN_REGISTERS_RANGE:
        print(f"  üì° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Register {reg}...", end=" ")

        try:
            result = client.read_holding_registers(address=reg, count=1, slave=slave_id)  # ‡πÉ‡∏ä‡πâ kwargs
            if result and not result.isError():
                print(f"‚úÖ ‡∏û‡∏ö! üìå Register Address: {reg} (‡∏Ñ‡πà‡∏≤: {result.registers[0]})")
            else:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö")
        except Exception as e:
            print(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

# üîå ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
client.close()
print("\n‚úÖ ‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
